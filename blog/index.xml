<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on yuri | Lab</title>
    <link>http://www.yurilab.com/blog/</link>
    <description>Recent content in Blogs on yuri | Lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2017 | Follow on &lt;a href=&#34;https://twitter.com/YuriTheCoder&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt; | using &lt;a href=&#34;https://github.com/mgjohansen/hucore.git&#34; target=&#34;_blank&#34;&gt;Hucore theme&lt;/a&gt; &amp; &lt;a href=&#34;http://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; ♥</copyright>
    <lastBuildDate>Thu, 17 Mar 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.yurilab.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ATS零碎笔记(二) - 避免雪崩</title>
      <link>http://www.yurilab.com/blog/how_to_avoid_the_thundering_herd/</link>
      <pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.yurilab.com/blog/how_to_avoid_the_thundering_herd/</guid>
      <description>&lt;p&gt;在应对高并发的请求时，ATS能够顽强的抗住请求压力，高速的输出缓存内容，但是当请求失效的时候，
ATS不得不向回源机发起请求，希望重新获得这块内容并缓存起来。那么这里就有一个问题：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当ATS发现缓存失效，向回源机发起请求，在拿回全部内容之前，这段时间内的用户请求要怎么处理？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ATS零碎笔记(一) - Lua</title>
      <link>http://www.yurilab.com/blog/using-lua-with-ats/</link>
      <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.yurilab.com/blog/using-lua-with-ats/</guid>
      <description>&lt;h2 id=&#34;tslua配置姿势&#34;&gt;tslua配置姿势&lt;/h2&gt;

&lt;p&gt;这里只介绍从源码编译的方法，当然也有其他的
&lt;a href=&#34;https://blog.zymlinux.net/index.php/archives/768&#34;&gt;安装方式&lt;/a&gt;，两种都蛮简单。&lt;/p&gt;

&lt;p&gt;从源码编译只需要在执行&lt;code&gt;./configure&lt;/code&gt;的时候加一个参数&lt;code&gt;--enable-experimental-plugins&lt;/code&gt;，
这样在编译ATS的时候就会把实验性的插件也一起编译了，将来再用到其他插件也会很方便，无需重新编译。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>